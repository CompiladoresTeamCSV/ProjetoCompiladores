# Generated from Gramatica_dados.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,171,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
        1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,5,11,
        104,8,11,10,11,12,11,107,9,11,1,11,1,11,1,12,1,12,5,12,113,8,12,
        10,12,12,12,116,9,12,1,12,1,12,1,12,1,12,4,12,122,8,12,11,12,12,
        12,123,1,12,1,12,1,13,1,13,1,13,5,13,131,8,13,10,13,12,13,134,9,
        13,1,13,1,13,1,14,4,14,139,8,14,11,14,12,14,140,1,14,1,14,4,14,145,
        8,14,11,14,12,14,146,3,14,149,8,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,3,15,160,8,15,1,16,1,16,1,16,1,16,3,16,166,8,16,1,
        17,1,17,1,17,1,17,0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,1,0,6,3,0,
        10,10,13,13,34,34,2,0,65,90,97,122,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,2,0,9,10,32,32,182,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,44,1,0,0,0,5,53,1,0,0,0,7,59,
        1,0,0,0,9,64,1,0,0,0,11,70,1,0,0,0,13,76,1,0,0,0,15,80,1,0,0,0,17,
        84,1,0,0,0,19,91,1,0,0,0,21,99,1,0,0,0,23,101,1,0,0,0,25,110,1,0,
        0,0,27,127,1,0,0,0,29,138,1,0,0,0,31,159,1,0,0,0,33,165,1,0,0,0,
        35,167,1,0,0,0,37,38,5,102,0,0,38,39,5,105,0,0,39,40,5,108,0,0,40,
        41,5,116,0,0,41,42,5,114,0,0,42,43,5,101,0,0,43,2,1,0,0,0,44,45,
        5,99,0,0,45,46,5,97,0,0,46,47,5,114,0,0,47,48,5,114,0,0,48,49,5,
        101,0,0,49,50,5,103,0,0,50,51,5,117,0,0,51,52,5,101,0,0,52,4,1,0,
        0,0,53,54,5,115,0,0,54,55,5,97,0,0,55,56,5,108,0,0,56,57,5,118,0,
        0,57,58,5,101,0,0,58,6,1,0,0,0,59,60,5,115,0,0,60,61,5,111,0,0,61,
        62,5,109,0,0,62,63,5,101,0,0,63,8,1,0,0,0,64,65,5,109,0,0,65,66,
        5,101,0,0,66,67,5,100,0,0,67,68,5,105,0,0,68,69,5,97,0,0,69,10,1,
        0,0,0,70,71,5,99,0,0,71,72,5,111,0,0,72,73,5,110,0,0,73,74,5,116,
        0,0,74,75,5,101,0,0,75,12,1,0,0,0,76,77,5,109,0,0,77,78,5,105,0,
        0,78,79,5,110,0,0,79,14,1,0,0,0,80,81,5,109,0,0,81,82,5,97,0,0,82,
        83,5,120,0,0,83,16,1,0,0,0,84,85,5,111,0,0,85,86,5,114,0,0,86,87,
        5,100,0,0,87,88,5,101,0,0,88,89,5,110,0,0,89,90,5,101,0,0,90,18,
        1,0,0,0,91,92,5,101,0,0,92,93,5,120,0,0,93,94,5,112,0,0,94,95,5,
        111,0,0,95,96,5,114,0,0,96,97,5,116,0,0,97,98,5,101,0,0,98,20,1,
        0,0,0,99,100,5,59,0,0,100,22,1,0,0,0,101,105,5,34,0,0,102,104,8,
        0,0,0,103,102,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,
        0,0,0,106,108,1,0,0,0,107,105,1,0,0,0,108,109,5,34,0,0,109,24,1,
        0,0,0,110,114,5,34,0,0,111,113,8,0,0,0,112,111,1,0,0,0,113,116,1,
        0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,117,1,0,0,0,116,114,1,
        0,0,0,117,118,5,92,0,0,118,119,5,46,0,0,119,121,1,0,0,0,120,122,
        7,1,0,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,
        1,0,0,0,124,125,1,0,0,0,125,126,5,34,0,0,126,26,1,0,0,0,127,128,
        5,36,0,0,128,132,7,2,0,0,129,131,7,3,0,0,130,129,1,0,0,0,131,134,
        1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,135,1,0,0,0,134,132,
        1,0,0,0,135,136,5,36,0,0,136,28,1,0,0,0,137,139,7,4,0,0,138,137,
        1,0,0,0,139,140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,148,
        1,0,0,0,142,144,5,46,0,0,143,145,7,4,0,0,144,143,1,0,0,0,145,146,
        1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,142,
        1,0,0,0,148,149,1,0,0,0,149,30,1,0,0,0,150,160,2,60,62,0,151,152,
        5,62,0,0,152,160,5,61,0,0,153,154,5,60,0,0,154,160,5,61,0,0,155,
        156,5,61,0,0,156,160,5,61,0,0,157,158,5,33,0,0,158,160,5,61,0,0,
        159,150,1,0,0,0,159,151,1,0,0,0,159,153,1,0,0,0,159,155,1,0,0,0,
        159,157,1,0,0,0,160,32,1,0,0,0,161,162,5,38,0,0,162,166,5,38,0,0,
        163,164,5,124,0,0,164,166,5,124,0,0,165,161,1,0,0,0,165,163,1,0,
        0,0,166,34,1,0,0,0,167,168,7,5,0,0,168,169,1,0,0,0,169,170,6,17,
        0,0,170,36,1,0,0,0,10,0,105,114,123,132,140,146,148,159,165,1,6,
        0,0
    ]

class Gramatica_dadosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FILTER = 1
    LOAD = 2
    SAVE = 3
    SUM = 4
    AVG = 5
    COUNT = 6
    MIN = 7
    MAX = 8
    SORT = 9
    EXPORT = 10
    END_OF_LINE = 11
    STRING = 12
    FILE = 13
    ID = 14
    NUMBER = 15
    OPERATOR = 16
    LOGICAL_OPERATOR = 17
    BRANCO = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'filtre'", "'carregue'", "'salve'", "'some'", "'media'", "'conte'", 
            "'min'", "'max'", "'ordene'", "'exporte'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "FILTER", "LOAD", "SAVE", "SUM", "AVG", "COUNT", "MIN", "MAX", 
            "SORT", "EXPORT", "END_OF_LINE", "STRING", "FILE", "ID", "NUMBER", 
            "OPERATOR", "LOGICAL_OPERATOR", "BRANCO" ]

    ruleNames = [ "FILTER", "LOAD", "SAVE", "SUM", "AVG", "COUNT", "MIN", 
                  "MAX", "SORT", "EXPORT", "END_OF_LINE", "STRING", "FILE", 
                  "ID", "NUMBER", "OPERATOR", "LOGICAL_OPERATOR", "BRANCO" ]

    grammarFileName = "Gramatica_dados.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


